apiVersion: v1
kind: Service
metadata:
  name: chat-svc
spec:
  type: LoadBalancer
  selector:
    app: backend
  ports:
  - port: 6060
    name: godoc
    targetPort: 6060
  - port: 8000
    name: apiserver
    targetPort: 8000
  - port: 8001
    name: flutter-web-server
    targetPort: 8001

---

### Backend: Go

apiVersion: v1
kind: Pod
metadata:
  name: backend
  labels:
    app: backend
spec:
  containers:
  - name: backend
    image: sjc.vultrcr.com/moonlightoffice/go:latest
    imagePullPolicy: IfNotPresent
    ports:
    - containerPort: 6060
    - containerPort: 8000
    volumeMounts:
    - name: chat-app-demo
      mountPath: /chat-app-demo
    command: ["godoc", "-http", "0.0.0.0:6060"]
  volumes:
  - name: chat-app-demo
    persistentVolumeClaim:
      claimName: chat-pvc

---

### Frontend: Flutter

apiVersion: v1
kind: Pod
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  terminationGracePeriodSeconds: 2
  containers:
  - name: frontend
    image: sjc.vultrcr.com/moonlightoffice/flutter:latest
    imagePullPolicy: IfNotPresent
    ports:
    - containerPort: 8001
    volumeMounts:
    - name: chat-app-demo
      mountPath: /chat-app-demo
    command: ["sleep", "1000000"]
  volumes:
  - name: chat-app-demo
    persistentVolumeClaim:
      claimName: chat-pvc

---

### MySQL client

apiVersion: v1
kind: Pod
metadata:
  name: mysql-client
spec:
  terminationGracePeriodSeconds: 2
  containers:
  - name: mysql-client
    image: mysql
    imagePullPolicy: IfNotPresent
    env:
    - name: HOST
      value: tidb-cluster-tidb
    - name: PORT
      value: "4000"
    - name: DB
      value: app
    volumeMounts:
    - name: chat-app-demo
      mountPath: /chat-app-demo
    workingDir: /chat-app-demo/database
    command: ["sleep", "1000000"]
  volumes:
  - name: chat-app-demo
    persistentVolumeClaim:
      claimName: chat-pvc
